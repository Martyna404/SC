#include <iostream>
#include <thread>

// Global function
void globalFunction(std::string text) {
    std::cout << "Global Function Message: " << text << std::endl;
}

// Function object
class FunctionObject {
public:
    void operator()(std::string text) {
        std::cout << "Function Object Message: " << text << std::endl;
    }
};

// Class with a method
class MyClass {
public:
    void classMethod(std::string text) {
        std::cout << "Class Method Message: " << text << std::endl;
    }
};

int main() {
    // Thread with global function
    std::thread t1(globalFunction, "Hello from global function");

    // Thread with function object
    FunctionObject funcObj;
    std::thread t2(funcObj, "Hello from function object");

    // Thread with class method
    MyClass obj;
    std::thread t3(&MyClass::classMethod, &obj, "Hello from class method");

    // Thread with lambda function
    std::thread t4([](std::string text) {
        std::cout << "Lambda Function Message: " << text << std::endl;
        }, "Hello from lambda function");

    // Wait for all threads to finish
    t1.join();
    t2.join();
    t3.join();
    t4.join();

    return 0;
}



